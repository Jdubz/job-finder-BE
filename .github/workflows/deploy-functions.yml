name: Deploy Cloud Functions

on:
  push:
    branches:
      - main
      - staging
    paths:
      - "functions/**"
      - ".github/workflows/deploy-functions.yml"
  pull_request:
    branches:
      - main
      - staging
    paths:
      - "functions/**"
      - ".github/workflows/deploy-functions.yml"

# Cancel in-progress runs for the same branch
concurrency:
  group: deploy-functions-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_PROJECT_ID: static-sites-257923
  FUNCTION_REGION: us-central1

jobs:
  # Detect which functions changed
  detect-changes:
    name: Detect Changed Functions
    runs-on: ubuntu-latest
    outputs:
      content-items: ${{ steps.changes.outputs.content-items }}
      experience: ${{ steps.changes.outputs.experience }}
      generator: ${{ steps.changes.outputs.generator }}
      any-changed: ${{ steps.changes.outputs.any-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: changes
        run: |
          # For PRs, compare against base branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For pushes, compare against previous commit
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "Comparing $BASE_SHA...$HEAD_SHA"

          # Get changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA || echo "functions/")

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if shared code or specific function changed
          CONTENT_ITEMS_CHANGED=false
          EXPERIENCE_CHANGED=false
          GENERATOR_CHANGED=false
          ANY_CHANGED=false

          # Check for shared code changes (affects all functions)
          if echo "$CHANGED_FILES" | grep -qE "^functions/(src/(config|middleware|utils|types|services)|package\.json|tsconfig\.json)"; then
            echo "Shared code changed - all functions need redeployment"
            CONTENT_ITEMS_CHANGED=true
            EXPERIENCE_CHANGED=true
            GENERATOR_CHANGED=true
            ANY_CHANGED=true
          fi

          # Check function-specific changes
          if echo "$CHANGED_FILES" | grep -qE "^functions/src/(index\.ts|content-items\.ts)"; then
            CONTENT_ITEMS_CHANGED=true
            ANY_CHANGED=true
          fi

          if echo "$CHANGED_FILES" | grep -qE "^functions/src/(index\.ts|experience\.ts)"; then
            EXPERIENCE_CHANGED=true
            ANY_CHANGED=true
          fi

          if echo "$CHANGED_FILES" | grep -qE "^functions/src/(index\.ts|generator\.ts|job-queue\.ts|resume\.ts|templates)"; then
            GENERATOR_CHANGED=true
            ANY_CHANGED=true
          fi

          # Check workflow changes (redeploy all)
          if echo "$CHANGED_FILES" | grep -qE "^\.github/workflows/deploy-functions\.yml"; then
            echo "Workflow changed - all functions need redeployment"
            CONTENT_ITEMS_CHANGED=true
            EXPERIENCE_CHANGED=true
            GENERATOR_CHANGED=true
            ANY_CHANGED=true
          fi

          echo "content-items=$CONTENT_ITEMS_CHANGED" >> $GITHUB_OUTPUT
          echo "experience=$EXPERIENCE_CHANGED" >> $GITHUB_OUTPUT
          echo "generator=$GENERATOR_CHANGED" >> $GITHUB_OUTPUT
          echo "any-changed=$ANY_CHANGED" >> $GITHUB_OUTPUT

          echo "Results:"
          echo "  content-items: $CONTENT_ITEMS_CHANGED"
          echo "  experience: $EXPERIENCE_CHANGED"
          echo "  generator: $GENERATOR_CHANGED"
          echo "  any-changed: $ANY_CHANGED"

  # Build and test (runs once, cached)
  build-and-test:
    name: Build & Test Functions
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "functions/package-lock.json"

      - name: Cache TypeScript build
        uses: actions/cache@v4
        with:
          path: |
            functions/dist
            functions/node_modules/.cache
          key: functions-build-${{ runner.os }}-${{ hashFiles('functions/src/**/*.ts', 'functions/tsconfig.json', 'functions/package-lock.json') }}
          restore-keys: |
            functions-build-${{ runner.os }}-

      - name: Install dependencies
        working-directory: functions
        run: npm ci

      - name: Build TypeScript
        working-directory: functions
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: |
            functions/dist/
            functions/package.json
            functions/package-lock.json
            functions/src/templates/
          retention-days: 1

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: |
      github.ref == 'refs/heads/staging' &&
      github.event_name == 'push' &&
      needs.detect-changes.outputs.any-changed == 'true'
    permissions:
      contents: read
      id-token: write
    environment:
      name: staging
      url: https://job-finder-staging.joshwentworth.com

    strategy:
      fail-fast: false
      matrix:
        function:
          # Content Items Functions
          - name: createContentItem
            entry_point: createContentItem
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: getContentItem
            entry_point: getContentItem
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: listContentItems
            entry_point: listContentItems
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: updateContentItem
            entry_point: updateContentItem
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: deleteContentItem
            entry_point: deleteContentItem
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.content-items }}
          # Experience Functions
          - name: createExperience
            entry_point: createExperience
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: getExperience
            entry_point: getExperience
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: listExperiences
            entry_point: listExperiences
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: updateExperience
            entry_point: updateExperience
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: deleteExperience
            entry_point: deleteExperience
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.experience }}
          # Generator Functions
          - name: generateDocument
            entry_point: generateDocument
            memory: 512Mi
            max_instances: 10
            secrets: OPENAI_API_KEY=openai-api-key:latest,GOOGLE_GENERATIVE_AI_API_KEY=google-genai-key:latest
            changed: ${{ needs.detect-changes.outputs.generator }}
          - name: getGenerationRequest
            entry_point: getGenerationRequest
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.generator }}
          - name: getGenerationResponse
            entry_point: getGenerationResponse
            memory: 256Mi
            max_instances: 10
            changed: ${{ needs.detect-changes.outputs.generator }}

    steps:
      - name: Check if deployment needed
        id: should-deploy
        run: |
          if [ "${{ matrix.function.changed }}" = "true" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.function.name }} changed - will deploy"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "⏭️  ${{ matrix.function.name }} unchanged - skipping"
          fi

      - name: Checkout repository
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download build artifacts
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: functions-build/

      - name: Authenticate to Google Cloud
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/789847666726/locations/global/workloadIdentityPools/github-actions/providers/github"
          service_account: "github-actions-deployer@static-sites-257923.iam.gserviceaccount.com"

      - name: Setup Cloud SDK
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create deployment package
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          mkdir -p deploy
          cp -r functions-build/functions/dist/* deploy/
          cp -r functions-build/functions/src/templates deploy/ 2>/dev/null || true
          jq 'del(.scripts) | del(.devDependencies) | .main = "index.js"' functions-build/functions/package.json > deploy/package.json
          cp functions-build/functions/package-lock.json deploy/ 2>/dev/null || true
          echo "✅ Deployment package created for ${{ matrix.function.name }}"
          ls -la deploy/

      - name: Deploy ${{ matrix.function.name }} to Staging
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          DEPLOY_CMD="gcloud functions deploy ${{ matrix.function.name }}-staging \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.FUNCTION_REGION }} \
            --source=deploy \
            --entry-point=${{ matrix.function.entry_point }} \
            --trigger-http \
            --allow-unauthenticated \
            --memory=${{ matrix.function.memory }} \
            --timeout=120s \
            --max-instances=${{ matrix.function.max_instances }} \
            --set-env-vars=NODE_ENV=staging,ENVIRONMENT=staging"

          # Add secrets if they exist
          if [ -n "${{ matrix.function.secrets }}" ]; then
            DEPLOY_CMD="$DEPLOY_CMD --set-secrets=${{ matrix.function.secrets }}"
          fi

          DEPLOY_CMD="$DEPLOY_CMD --quiet"

          echo "🚀 Deploying ${{ matrix.function.name }}-staging..."
          if eval $DEPLOY_CMD; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi

      - name: Verify deployment
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "✅ ${{ matrix.function.name }}-staging deployed successfully"
          gcloud functions describe ${{ matrix.function.name }}-staging \
            --region=${{ env.FUNCTION_REGION }} \
            --format="value(name,state,serviceConfig.uri)"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.detect-changes.outputs.any-changed == 'true'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
      url: https://job-finder.joshwentworth.com

    strategy:
      fail-fast: false
      matrix:
        function:
          # Content Items Functions
          - name: createContentItem
            entry_point: createContentItem
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: getContentItem
            entry_point: getContentItem
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: listContentItems
            entry_point: listContentItems
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: updateContentItem
            entry_point: updateContentItem
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.content-items }}
          - name: deleteContentItem
            entry_point: deleteContentItem
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.content-items }}
          # Experience Functions
          - name: createExperience
            entry_point: createExperience
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: getExperience
            entry_point: getExperience
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: listExperiences
            entry_point: listExperiences
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: updateExperience
            entry_point: updateExperience
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.experience }}
          - name: deleteExperience
            entry_point: deleteExperience
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.experience }}
          # Generator Functions
          - name: generateDocument
            entry_point: generateDocument
            memory: 1024Mi
            max_instances: 50
            secrets: OPENAI_API_KEY=openai-api-key:latest,GOOGLE_GENERATIVE_AI_API_KEY=google-genai-key:latest
            changed: ${{ needs.detect-changes.outputs.generator }}
          - name: getGenerationRequest
            entry_point: getGenerationRequest
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.generator }}
          - name: getGenerationResponse
            entry_point: getGenerationResponse
            memory: 512Mi
            max_instances: 50
            changed: ${{ needs.detect-changes.outputs.generator }}

    steps:
      - name: Check if deployment needed
        id: should-deploy
        run: |
          if [ "${{ matrix.function.changed }}" = "true" ]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.function.name }} changed - will deploy"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "⏭️  ${{ matrix.function.name }} unchanged - skipping"
          fi

      - name: Checkout repository
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download build artifacts
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: functions-build/

      - name: Authenticate to Google Cloud
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/789847666726/locations/global/workloadIdentityPools/github-actions/providers/github"
          service_account: "github-actions-deployer@static-sites-257923.iam.gserviceaccount.com"

      - name: Setup Cloud SDK
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create deployment package
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          mkdir -p deploy
          cp -r functions-build/functions/dist/* deploy/
          cp -r functions-build/functions/src/templates deploy/ 2>/dev/null || true
          jq 'del(.scripts) | del(.devDependencies) | .main = "index.js"' functions-build/functions/package.json > deploy/package.json
          cp functions-build/functions/package-lock.json deploy/ 2>/dev/null || true
          echo "✅ Deployment package created for ${{ matrix.function.name }}"
          ls -la deploy/

      - name: Deploy ${{ matrix.function.name }} to Production
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          DEPLOY_CMD="gcloud functions deploy ${{ matrix.function.name }} \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.FUNCTION_REGION }} \
            --source=deploy \
            --entry-point=${{ matrix.function.entry_point }} \
            --trigger-http \
            --allow-unauthenticated \
            --memory=${{ matrix.function.memory }} \
            --timeout=120s \
            --max-instances=${{ matrix.function.max_instances }} \
            --set-env-vars=NODE_ENV=production,ENVIRONMENT=production"

          # Add secrets if they exist
          if [ -n "${{ matrix.function.secrets }}" ]; then
            DEPLOY_CMD="$DEPLOY_CMD --set-secrets=${{ matrix.function.secrets }}"
          fi

          DEPLOY_CMD="$DEPLOY_CMD --quiet"

          echo "🚀 Deploying ${{ matrix.function.name }}..."
          if eval $DEPLOY_CMD; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi

      - name: Verify deployment
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "✅ ${{ matrix.function.name }} deployed successfully to production"
          gcloud functions describe ${{ matrix.function.name }} \
            --region=${{ env.FUNCTION_REGION }} \
            --format="value(name,state,serviceConfig.uri)"
