rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================
    // HELPER FUNCTIONS
    // ============================================================

    /**
     * Check if user is authenticated
     */
    function isAuthenticated() {
      return request.auth != null;
    }

    /**
     * Check if user owns the resource
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    /**
     * Check if user has editor role
     * Editors can manage content and generate documents
     */
    function isEditor() {
      return isAuthenticated() &&
             request.auth.token.role == 'editor';
    }

    /**
     * Check if user has admin role
     * Admins can manage all resources and access queue
     */
    function isAdmin() {
      return isAuthenticated() &&
             request.auth.token.role == 'admin';
    }

    /**
     * Check if user has any valid role (viewer, editor, admin)
     * Users with any of these roles can read their own data
     */
    function isAnyRole() {
      return isAuthenticated() &&
             request.auth.token.role in ['viewer', 'editor', 'admin'];
    }

    /**
     * Validate common timestamp fields
     */
    function hasValidTimestamps() {
      return request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }

    // ============================================================
    // JOB QUEUE COLLECTION
    // Used by: job-queue.service.ts
    // ============================================================

    match /job-queue/{queueId} {
      // All authenticated users can read all queue items
      allow read: if isAuthenticated();

      // Allow authenticated users to create queue items (no submittedBy restriction)
      allow create: if isAuthenticated() &&
                       request.resource.data.created_at is timestamp;

      // Allow authenticated users to update queue items
      allow update: if isAuthenticated();

      // Allow authenticated users to delete queue items
      allow delete: if isAuthenticated();

      // Admins can read and manage all queue items
      allow read, write: if isAdmin();
    }

    // ============================================================
    // GENERATOR DOCUMENTS COLLECTION
    // Used by: generator.service.ts
    // Stores document generation requests and responses
    // NOTE: Renamed from "generator" to "generator-documents" for clarity
    // ============================================================

    match /generator-documents/{documentId} {
      // Editors can read all documents
      allow read: if isAuthenticated();

      // Authenticated users can create document generation requests
      allow create: if isAuthenticated() &&
                       request.resource.data.createdAt is timestamp;

      // Authenticated users can update documents
      allow update: if isAuthenticated();

      // Authenticated users can delete documents
      allow delete: if isAuthenticated();

      // Admins have full access
      allow read, write: if isAdmin();
    }

    // ============================================================
    // CONTENT ITEMS COLLECTION
    // Used by: content-item.service.ts
    // Stores user's resume content (experience, skills, projects)
    // ============================================================

    match /content-items/{itemId} {
      // Editors can read all content items
      allow read: if isAuthenticated();

      // Editors can create content items
      allow create: if isAuthenticated() &&
                       hasValidTimestamps();

      // Editors can update any content items
      allow update: if isAuthenticated();

      // Editors can delete any content items
      allow delete: if isAuthenticated();

      // Admins have full access
      allow read, write: if isAdmin();
    }

    // ============================================================
    // EXPERIENCES COLLECTION
    // Used by: experience.service.ts
    // Stores work experience entries
    // ============================================================

    match /experiences/{experienceId} {
      // Editors can read all experiences
      allow read: if isAuthenticated();

      // Editors can create experiences
      allow create: if isAuthenticated() &&
                       request.resource.data.type == 'experience';

      // Editors can update any experiences
      allow update: if isAuthenticated();

      // Editors can delete any experiences
      allow delete: if isAuthenticated();

      // Admins have full access
      allow read, write: if isAdmin();
    }

    // ============================================================
    // PERSONAL INFO COLLECTION
    // Used by: generator.service.ts
    // Stores user's personal information for document generation
    // ============================================================

    match /personal-info/{userId} {
      // Users can read their own personal info
      allow read: if isOwner(userId);

      // Editors can create and update their own personal info
      allow create, update: if isEditor() && isOwner(userId);

      // Users can delete their own personal info
      allow delete: if isEditor() && isOwner(userId);

      // Admins have full access
      allow read, write: if isAdmin();
    }

    // ============================================================
    // USER PROFILES COLLECTION
    // Used by: future user profile management
    // Stores user preferences and settings
    // ============================================================

    match /user-profiles/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);

      // Authenticated users can create their own profile
      allow create: if isAuthenticated() && isOwner(userId);

      // Users can update their own profile
      allow update: if isOwner(userId);

      // Users cannot delete their own profile (admin only)
      allow delete: if isAdmin();
    }

    // ============================================================
    // JOB MATCHES COLLECTION (Shared with job-finder-worker)
    // Read-only access from backend - worker writes to this collection
    // ============================================================

    match /job-matches/{matchId} {
      // All authenticated users can read all matches (no submittedBy restriction)
      allow read: if isAuthenticated();

      // Backend functions can write (service account)
      // User-initiated writes not allowed from client
      allow write: if false;

      // Admins have full access
      allow read, write: if isAdmin();
    }

    // ============================================================
    // COMPANIES COLLECTION (Shared with job-finder-worker)
    // Read-only from client side
    // ============================================================

    match /companies/{companyId} {
      // All authenticated users can read company data
      allow read: if isAuthenticated();

      // Only service accounts and admins can write
      allow write: if isAdmin();
    }

    // ============================================================
    // JOB SOURCES COLLECTION (Shared with job-finder-worker)
    // Source configurations for job scraping
    // ============================================================

    match /job-sources/{sourceId} {
      // Authenticated users can read source configs
      allow read: if isAuthenticated();

      // Only admins can manage sources
      allow write: if isAdmin();
    }

    // ============================================================
    // JOB FINDER CONFIG COLLECTION
    // Application configuration (AI prompts, settings, personal-info)
    // NOTE: personal-info moved here from generator collection
    // ============================================================

    match /job-finder-config/{configId} {
      // All authenticated users can read config
      allow read: if isAuthenticated();

      // Personal info can be edited by any authenticated user
      allow write: if configId == 'personal-info' && isAuthenticated();

      // AI prompts can be edited by editors (they need to customize prompts)
      allow write: if configId == 'ai-prompts' && isAuthenticated();

      // All other config documents require admin privileges
      allow write: if isAdmin();
    }

    // ============================================================
    // DEFAULT DENY ALL
    // All other collections require explicit rules
    // ============================================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
